import numpy
import dd
import kk
import scipy.interpolate
import matplotlib.pylab as plt
import IPython


class initialize_output:
	status = False

class IDA:
	def __init__( self ,  Experiment = 'AUGD', Shotnumber = None ):
		self.Status = False
		self.Status_mean = False
		if Shotnumber != None:
			self.Load( Shotnumber )

	def __del__( self ):
		self.Unload( )
		del self.Status

	def Load( self ,   Shotnumber, Experiment = 'AUGD', Edition = 0L, tBegin=-1.0, tEnd=12.0 ):
		self.Unload()
		try:
			print Shotnumber
			sf = dd.shotfile( 'IDA', Shotnumber, Experiment, Edition)
		except:
			print "Error reading shotfile" 
			return
	
		print tBegin, tEnd
		self.time = sf( 'ne' ).time
		index = numpy.where( ( self.time > tBegin ) & ( self.time < tEnd ) )
		self.time = self.time[index]
		self.rhop = sf( 'rhop'  ).data[index]
	
		self.ne = sf( 'ne'  ).data[index]
		self.ne_lo = sf( 'ne_lo').data[index]
		self.ne_up = sf( 'ne_up'  ).data[index]
		self.dne_dr = sf( 'dne_dr'  ).data[index]
		self.Te = sf( 'Te'  ).data[index]
		self.Te_lo = sf( 'Te_lo'  ).data[index]
		self.Te_up = sf( 'Te_up'  ).data[index]
		self.dTe_dr = sf( 'dTe_dr'  ).data[index]
		self.maxne = numpy.max(self.ne)
		self.maxTe = numpy.max(self.Te)
		self.Shotnumber = Shotnumber
		self.Status = True

		self.meanProfile()
		sf.close()

	def Unload( self ):
		if self.Status:
			self.Status = False
			self.Status_mean = False
			del self.time
			del self.rhop
			del self.ne
			del self.ne_lo
			del self.ne_up
			del self.dne_dr
			del self.Te
			del self.Te_lo
			del self.Te_up	
			del self.dTe_dr
			del self.Shotnumber

	def IDAonRz( self , time , R, z , Experiment = 'AUGD', Diagnostic='EQH' ):
		if self.Status:
			idx = numpy.argmin( numpy.abs( self.time - time ) )
			output =initialize_output()
			out = kk.KK().kkrzptfn( self.Shotnumber, self.time[idx], R, z, exp= Experiment, diag=Diagnostic, ed=0)
			f = scipy.interpolate.interp1d( self.rhop[idx,:] , self.ne[idx,:] )
			output.ne = f( out.rho_p )
			f = scipy.interpolate.interp1d( self.rhop[idx,:] , self.ne_lo[idx,:] )
			output.ne_lo = f( out.rho_p )
			f = scipy.interpolate.interp1d( self.rhop[idx,:] , self.ne_up[idx,:] )
			output.ne_up = f( out.rho_p )
			f = scipy.interpolate.interp1d( self.rhop[idx,:] , self.Te[idx,:] )
			output.Te = f( out.rho_p )
			f = scipy.interpolate.interp1d( self.rhop[idx,:] , self.Te_lo[idx,:] )
			output.Te_lo =f( out.rho_p )
			f = scipy.interpolate.interp1d( self.rhop[idx,:] , self.Te_up[idx,:] )				
			output.Te_up = f( out.rho_p )


		#	rhop = numpy.where( output.rho_p < numpy.max( self.rhop[idx,:]) )

			return output 



	def MapToRhop( self , timepoints ):
		ntimes = 0
		if self.Status:
			ntimes = numpy.size(timepoints)
			rhop = numpy.zeros( (ntimes,numpy.size(self.rhop[0,:])) )
			try:
				for i in range(ntimes):
					rz_idx = numpy.argmin( numpy.abs( self.time - timepoints[i] ) )
					rhop[i,:] = self.rhop[rz_idx,:]
			except Exception:
				rz_idx = numpy.argmin(numpy.abs(self.time-timepoints))
				rhop = self.rhop[rz_idx,:]
				pass      			
			return rhop 
	




	def meanProfile(self, tstart = 0.0 ,tend = 10.0 , coordinates = 'rhop' ):
		
		if self.Status:
			if tend > tstart:
				idx = numpy.where( ( self.time > tstart ) & ( self.time < tend ) )
				self.mean_rho = numpy.mean(self.rhop,axis=0)
				self.mean_ne = numpy.mean(self.ne,axis=0)
				self.mean_Te = numpy.mean(self.Te,axis=0)
				self.Status_mean=True
				
			else:
				print ''
				return None
				
		else:
			print 'no data loaded'
			return None
	




	def write_ascii( self , tstart = 0.0 ,tend = 10.0 , filename = "IDA_out.dat", key=['ne', 'Te'] ):	
		
		if self.Status:
			out_file = open(filename,"w")	
			start_idx = numpy.argmin( numpy.abs( self.time - tstart ) )
			end_idx = numpy.argmin( numpy.abs( self.time - tend ) )

			out_file.write("# time rhop ne ne_lo ne_up Te Te_lo Te_up \n" )
			for j in range(start_idx,end_idx):
				for i in range(numpy.size(self.rhop[j,:])):
					out_file.write("%.6f " % self.time[j])
					out_file.write("%e " % self.rhop[j,i])
					out_file.write("%e " % self.ne[j,i])
					out_file.write("%e " % self.ne_lo[j,i])
					out_file.write("%e " % self.ne_up[j,i])
					out_file.write("%e " % self.Te[j,i])
					out_file.write("%e " % self.Te_lo[j,i])
					out_file.write("%e " % self.Te_up[j,i])
					out_file.write("\n")
				out_file.write("\n")
				out_file.write("\n")
			out_file.close()
				

#	def __call__( self , time , rhop = None ):


		
