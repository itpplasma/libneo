#F90 = f95-lah
#F90 = gfortran
#F90 = mpif90
F90 = mpif90.openmpi
#COMP = mpif90
#COMP = /proj/plasma/RMP/MARTIN/mpi-lah/bin/mpif90
#COMP = /proj/plasma/RMP/MARTIN/mpi-gf-4.7.2/bin/mpif90
#COMP = mpif90
COMP = mpif90.openmpi
#DEBUG =  Y

OBJS =	\
	OBJS/sparse_mod.o \
	OBJS/c_fortran_dgssv.o \
	OBJS/c_fortran_zgssv.o \
	OBJS/umf4_f77wrapper64.o \
	OBJS/umf4_f77zwrapper64.o \
	OBJS/ql-balance_mod.o \
	OBJS/sample_matrix.o \
	OBJS/wave_code_data_64bit.o \
	OBJS/vel_integral.o \
	OBJS/plag_coeff.o \
	OBJS/amn_of_r.o \
	OBJS/gengrid.o \
	OBJS/evolvestep.o \
	OBJS/rhs_balance.o \
	OBJS/W2_arr.o \
	OBJS/odeint_allroutines_without_pause.o \
	OBJS/Wmn.o \
	OBJS/ql-balance.o

LAPACK_LIB  = -llapack 
BLAS_LIB    = -lblas

# Project Libraries
PROJLIBS = /proj/plasma/Libs/

# SuperLU V. 4.1 and SuiteSparse V. 3.6.0
# Fortran-Interface of SuiteSparse is only tested 
SUPERLU_VER = 4.1
SUPERLU_DIR = $(PROJLIBS)SuperLU/SuperLU_$(SUPERLU_VER)/
SUPERLU_HDR = $(SUPERLU_DIR)SRC/
SUPERLU_F90 = $(SUPERLU_DIR)FORTRAN/
#SUPERLU_LIB = -L$(SUPERLU_DIR)lib/ -lsuperlu_4.1
SUITESPARSE_DIR = $(PROJLIBS)SuiteSparse_libandinclude/
SUITESPARSE_HDR= $(SUITESPARSE_DIR)include/
SUITESPARSE_F90 = $(SUITESPARSE_DIR)F90/
SUITESPARSE_LIB = /usr/lib/x86_64-linux-gnu/libsuperlu.so /usr/lib/x86_64-linux-gnu/libspqr.so /usr/lib/x86_64-linux-gnu/libtbb.so /usr/lib/x86_64-linux-gnu/libtbbmalloc.so /usr/lib/x86_64-linux-gnu/libumfpack.so /usr/lib/x86_64-linux-gnu/libcholmod.so /usr/lib/x86_64-linux-gnu/libccolamd.so /usr/lib/x86_64-linux-gnu/libcamd.so /usr/lib/x86_64-linux-gnu/libcolamd.so /usr/lib/x86_64-linux-gnu/libamd.so /usr/lib/x86_64-linux-gnu/libsuitesparseconfig.so /usr/lib/x86_64-linux-gnu/librt.so
#-L$(SUITESPARSE_DIR)lib/ -lumfpack -L$(SUITESPARSE_DIR)lib/AMD/Lib/ -lamd \
#-L$(SUITESPARSE_DIR)lib/ -lcholmod -L$(SUITESPARSE_DIR)lib/ -lcolamd \
#-L$(SUITESPARSE_DIR)lib/ -lcamd -L$(SUITESPARSE_DIR)lib/ -lmetis \
#-L$(SUITESPARSE_DIR)lib/ -lccolamd

###################################
# libkilca_64bit.a -> /itp/glusterfs/ag-plasma/soft/KiLCA-RW/lib/libKiLCA_Lib_V_1.1_FP_POLYNOMIAL_Debug_64bit.a
kilca_lib_path = ./lib
cvode_lib_path = ./soft/math_libs/64bit/sundials-2.6.2/lib/
slatec_lib_path = ./soft/math_libs/64bit/slatec/lib/
bessel_lib_path = ./soft/math_libs/64bit/bessel/
lapack_lib_path = ./soft/math_libs/64bit/lapack-3.2.1/lib/

kilca_libs = \
-L$(kilca_lib_path) -lkilca_64bit \
-L$(cvode_lib_path) -lsundials_cvode -lsundials_nvecserial \
-L$(slatec_lib_path) -lslatec \
-L$(bessel_lib_path) -lbessel \
-lgsl -lgslcblas \
 -lm -lc \
-lgfortran -lstdc++ 
##################################


OSTYPE  = $(shell uname -s)
# setting architecture
ARCH   := $(shell uname -m)
# setting hostname
HOSTNAME := $(shell uname -n)

# available Fortran90 compilers for Linux:
LAHEY    = f95-lah
INTEL    = f95-intel
INTEL81  = f95-intel8.1
GNU_F95  = g95
#GFORTRAN = gfortran
GFORTRAN = mpif90.openmpi

# define standard Fortran90 compiler
ifndef F90
  F90 = $(GFORTRAN)
  #F90 = $(LAHEY)
endif


#NAME_EXT := $(ARCH)
NAME_EXT := $(F90)_$(ARCH)
ifdef DEBUG
  NAME_EXT := DEBUG_$(F90)_$(ARCH)
endif
NAME_EXT := .$(NAME_EXT)
# to avoid an extension to the name of the executable uncomment the next line
#NAME_EXT := 

ifeq ($(OSTYPE), Linux)
##### linux #####
  OUTPUT := $(addsuffix -$(ARCH)-linux, $(OUTPUT))
  CC = mpicc 
  #CC = gcc
  FC = $(COMP)
  LD = $(COMP)
  #CFLAGS = -O3
  #CDEBUG =
  #  C preprocessor defs for compilation for the Fortran interface
  #  (-DNoChange, -DAdd_, -DAdd__, or -DUpCase)
  #
  CDEFS        = -DAdd_

  ifeq ($(F90), $(LAHEY))
    ### Lahey ###
    ifdef DEBUG
      DEBUGFLAG += -M OBJS --chk aesux --chkglobal -g --trace --trap # -C=all
      FFLAGS    += -M OBJS --wo --warn --f95 -O --ap --tp4 #--parallel
      CDEBUG    += -g -ggdb -C -p -fbacktrace
      CFLAGS    += -O0
    else
      FFLAGS    += -M OBJS --wo --warn --f95 -O --ap --tp4 #--parallel
      CFLAGS    += "-D DOUBLE_APPEND_FORTRAN"
    endif
    CFLAGS    += "-D DOUBLE_APPEND_FORTRAN"
    LDFLAGS   += # -static
    #LIBS = -L/usr/lib/gcc-lib/i386-redhat-linux/2.96/ -L/proj/plasma/Libs/ -llapack_amd_lah -lblas_amd_lah -lg2c
    LIBS = $(SUPERLU_LIB) $(LAPACK_LIB) $(BLAS_LIB) # -lg2c
    CUT_ASM_WARN = 2>&1 | grep -v "/tmp/asm"
  endif

#  ifeq ($(F90), $(INTEL), $(INTEL81))
  ifeq ($(findstring intel,$(F90)), intel)
    ### Intel ###
    ifdef DEBUG
      DEBUGFLAG += -g -inline_debug_info -CB -check all -traceback -DD # -pg
    endif
    FFLAGS    += # -inline_debug_info #-warn all
    LDFLAGS   += #-static -Bstatic 
    CUT_ASM_WARN =
    LIBS = -lefence -llapack -lblas -lg2c
  endif

  ifeq ($(F90), $(GNU_F95))
    ### Gnu F95 ###
    ifdef DEBUG
      DEBUGFLAG += -g -ggdb -C -p -ftrace=full -fbacktrace #-pg #-fmem-report
      FFLAGS    += -Wall
    else
      FFLAGS    += -O3 -Wall 
    endif
    CFLAGS    += "-D DOUBLE_APPEND_FORTRAN"
    LDFLAGS   += #-static  # static linkin does not work on AMD64 bit machines
    CUT_ASM_WARN = 
    # LIBS = -L/usr/lib/gcc-lib/i386-redhat-linux/2.96/ -llapack -lblas -lg2c
    LIBS = -llapack -lblas -lg2c
  endif

  ifeq ($(F90), $(GFORTRAN))
    ### gfortran Gnu F95 ###

    FFLAGS += -std=gnu #-std=f2003
    ifdef DEBUG
#      DEBUGFLAG += -g -ggdb -C -p -pg -fbacktrace -ffpe-trap=invalid,zero,overflow,underflow -fbounds-check
      DEBUGFLAG += -g -ggdb -C -p -pg -fbacktrace -ffpe-trap=invalid,zero,overflow -fbounds-check
#      DEBUGFLAG += -g -ggdb -C -p -pg -fbacktrace -ffpe-trap=invalid,zero,overflow,underflow #-Werror #-pg #-fmem-report
      FFLAGS    += -Waliasing -Wampersand  -Wline-truncation  -Wsurprising -Wno-tabs  -Wunderflow #-Wall# -Wunused-parameter -Wconversion -Wimplicit-interface -Wcharacter-truncation
#      FFLAGS    += -MOBJS -Waliasing -Wampersand  -Wline-truncation  -Wnonstd-intrinsics  -Wsurprising -Wno-tabs  -Wunderflow #-Wall# -Wunused-parameter -Wconversion -Wimplicit-interface -Wcharacter-truncation
      CDEBUG    += -g -ggdb -C -p -fbacktrace
      CFLAGS    += -O0 
    else	
      CFLAGS    += -O3 #-Wall 
      FFLAGS    += -J OBJS -O3 #-Wall
    endif
    CFLAGS    += "-D DOUBLE_APPEND_FORTRAN"
    LDFLAGS   += #-static
    CUT_ASM_WARN = 
    LIBS = $(SUPERLU_LIB) $(SUITESPARSE_LIB) $(LAPACK_LIB) $(BLAS_LIB) $(kilca_libs) # -lg2c
  endif

  ifdef DEBUG    # valgrind --leak-check=yes myprog arg1 arg2
    DBGLIBS += -lefence 
  endif
  
  LIBS += $(DBGLIBS)
  
 #### ifneq (,$(findstring t,$(MAKEFLAGS)))

endif  # ifeq ($(OSTYPE), Linux)


balance.x: $(OBJS) Balance.mk_mpi
	$(LD) $(DEBUGFLAG) $(LDFLAGS) -z muldefs -o balance.x$(NAME_EXT) $(OBJS) $(LIBS)
OBJS/sparse_mod.o: src/sparse_mod.f90 Balance.mk_mpi
	$(FC) $(DEBUGFLAG) $(FFLAGS) -c src/sparse_mod.f90
	mv sparse_mod.o OBJS
OBJS/c_fortran_dgssv.o: $(SUPERLU_F90)c_fortran_dgssv.c Balance.mk_mpi
	$(CC) $(CDEBUGFLAG) $(CFLAGS) -I$(SUPERLU_HDR) -c $(SUPERLU_F90)c_fortran_dgssv.c
	mv c_fortran_dgssv.o OBJS
OBJS/c_fortran_zgssv.o: $(SUPERLU_F90)c_fortran_zgssv.c Balance.mk_mpi
	$(CC) $(CDEBUGFLAG) $(CFLAGS) -I$(SUPERLU_HDR) -c $(SUPERLU_F90)c_fortran_zgssv.c
	mv c_fortran_zgssv.o OBJS
OBJS/umf4_f77wrapper64.o: $(SUITESPARSE_F90)umf4_f77wrapper.c Balance.mk_mpi
	$(CC) -I$(SUITESPARSE_HDR) -DDLONG -c $(SUITESPARSE_F90)umf4_f77wrapper.c -o umf4_f77wrapper64.o
	mv umf4_f77wrapper64.o OBJS
OBJS/umf4_f77zwrapper64.o: $(SUITESPARSE_F90)umf4_f77zwrapper.c Balance.mk_mpi
	$(CC) -I$(SUITESPARSE_HDR) -DZLONG -c $(SUITESPARSE_F90)umf4_f77zwrapper.c -o umf4_f77zwrapper64.o
	mv umf4_f77zwrapper64.o OBJS
OBJS/ql-balance_mod.o: src/ql-balance_mod.f90 Balance.mk_mpi
	$(FC) $(DEBUGFLAG) $(FFLAGS) -c src/ql-balance_mod.f90
	mv ql-balance_mod.o OBJS
OBJS/sample_matrix.o: src/sample_matrix.f90 Balance.mk_mpi
	$(FC) $(DEBUGFLAG) $(FFLAGS) -c src/sample_matrix.f90
	mv sample_matrix.o OBJS
OBJS/evolvestep.o: src/evolvestep.f90 Balance.mk_mpi src/ql-balance_mod.f90
	$(FC) $(DEBUGFLAG) $(FFLAGS) -c src/evolvestep.f90
	mv evolvestep.o OBJS
OBJS/gengrid.o: src/gengrid.f90 Balance.mk_mpi src/ql-balance_mod.f90
	$(FC) $(DEBUGFLAG) $(FFLAGS) -c src/gengrid.f90
	mv gengrid.o OBJS
OBJS/plag_coeff.o: src/plag_coeff.f90 Balance.mk_mpi src/ql-balance_mod.f90
	$(FC) $(DEBUGFLAG) $(FFLAGS) -c src/plag_coeff.f90
	mv plag_coeff.o OBJS
OBJS/ql-balance.o: src/ql-balance.f90 Balance.mk_mpi src/ql-balance_mod.f90
	$(FC) $(DEBUGFLAG) $(FFLAGS) -c src/ql-balance.f90
	mv ql-balance.o OBJS
OBJS/rhs_balance.o: src/rhs_balance.f90 Balance.mk_mpi src/ql-balance_mod.f90
	$(FC) $(DEBUGFLAG) $(FFLAGS) -c src/rhs_balance.f90
	mv rhs_balance.o OBJS
OBJS/W2_arr.o: src/W2_arr.f90 Balance.mk_mpi src/ql-balance_mod.f90
	$(FC) $(DEBUGFLAG) $(FFLAGS) -c src/W2_arr.f90
	mv W2_arr.o OBJS
OBJS/odeint_allroutines_without_pause.o: src/odeint_allroutines_without_pause.f Balance.mk_mpi src/ql-balance_mod.f90
	$(FC) $(DEBUGFLAG) $(FFLAGS) -c src/odeint_allroutines_without_pause.f
	mv odeint_allroutines_without_pause.o OBJS
OBJS/Wmn.o: src/Wmn.f90 Balance.mk_mpi src/ql-balance_mod.f90
	$(FC) $(DEBUGFLAG) $(FFLAGS) -c src/Wmn.f90
	mv Wmn.o OBJS
################################################################
OBJS/vel_integral.o: src/vel_integral.cpp Balance.mk_mpi 
	$(CC) -I$(SUITESPARSE_HDR) -DZLONG -c src/vel_integral.cpp
	mv vel_integral.o OBJS
OBJS/wave_code_data_64bit.o: src/wave_code_data_64bit.f90 Balance.mk_mpi src/ql-balance_mod.f90
	$(FC) $(DEBUGFLAG) $(FFLAGS) -c src/wave_code_data_64bit.f90
	mv wave_code_data_64bit.o OBJS
OBJS/amn_of_r.o: src/amn_of_r.f90 Balance.mk_mpi src/ql-balance_mod.f90
	$(FC) $(DEBUGFLAG) $(FFLAGS) -c src/amn_of_r.f90
	mv amn_of_r.o OBJS

#.c.o:
#	$(CC) $(CFLAGS) $(CDEFS) -I$(HEADER) -c $< $(VERBOSE)
