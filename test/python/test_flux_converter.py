"""
Test for flux_label_converter.py
"""
# %% standard modules
import numpy as np
from numpy.testing import assert_allclose
from scipy.interpolate import CubicSpline

# module to test
from libneo import FluxConverter

# control & testing data
torflux_control_profile = -np.array([  0.        ,   0.79529968,   1.59375918,   2.39571   ,
    3.2013764 ,   4.01095914,   4.82445535,   5.64180945,
    6.46296881,   7.28778702,   8.11615171,   8.94795915,
    9.78307726,  10.62139507,  11.46282612,  12.30729084,
    13.15471918,  14.00505247,  14.85824041,  15.71424257,
    16.57302718,  17.43456753,  18.2988409 ,  19.16582737,
    20.03551042,  20.90787722,  21.78291783,  22.66062423,
    23.54099043,  24.42401336,  25.30969239,  26.19802855,
    27.08902355,  27.98267862,  28.87899399,  29.7779687 ,
    30.67960109,  31.58388973,  32.49083552,  33.4004434 ,
    34.31272427,  35.22769903,  36.14540177,  37.06588361,
    37.98921312,  38.91547426,  39.84476456,  40.77719592,
    41.71289275,  42.65198716,  43.59461646,  44.54091928,
    45.49103306,  46.44509253,  47.40322759,  48.36556218,
    49.33221506,  50.3033005 ,  51.27892915,  52.25920894,
    53.24424569,  54.23414329,  55.22900401,  56.2289286 ,
    57.23401677,  58.2443682 ,  59.26008276,  60.28126063,
    61.30800226,  62.34040795,  63.37857761,  64.42261081,
    65.47260655,  66.52866339,  67.59088018,  68.65935646,
    69.73419252,  70.8154893 ,  71.90334838,  72.99787218,
    74.09916417,  75.2073289 ,  76.32247221,  77.44470164,
    78.5741266 ,  79.71085853,  80.85501105,  82.00670011,
    83.16604409,  84.33316391,  85.50818312,  86.691228  ,
    87.88242772,  89.08191457,  90.28982407,  91.50629526,
    92.73147078,  93.965497  ,  95.20852416,  96.46070631,
    97.72220158,  98.99317235, 100.27378543, 101.56421225,
    102.86462916, 104.17521769, 105.49616455, 106.82766157,
    108.16990595, 109.52310052, 110.88745406, 112.26318145,
    113.65050392, 115.04964961, 116.46085354, 117.88435754,
    119.32041041, 120.76926853, 122.23119641, 123.70646675,
    125.19536084, 126.69816916, 128.21519132, 129.7467358 ,
    131.29312098, 132.85467603, 134.43174151, 136.02466965,
    137.63382453, 139.25958237, 140.90233211, 142.56247611,
    144.24043163, 145.93663219, 147.6515278 , 149.38558524,
    151.13928825, 152.913139  , 154.70765986, 156.52339579,
    158.36091598, 160.22081353, 162.10370626, 164.01023867,
    165.94108538, 167.89695477, 169.87859069, 171.88677372,
    173.92232321, 175.98610133, 178.07901947, 180.2020431 ,
    182.35619366, 184.54255438, 186.76227728, 189.01659229,
    191.3068163 , 193.63436124, 196.00074442, 198.4076052 ,
    200.85672394, 203.35004022, 205.8896738 , 208.47794577,
    211.11739546, 213.8107988 , 216.56110283, 219.37132098,
    222.24422111, 225.18193541, 228.18523867, 231.25273699,
    234.38026304, 237.56041553, 240.78354519, 244.03906112,
    247.31703819, 250.60971409, 253.91144158, 257.21845125,
    260.52885531])

stor_control_profile = np.array([0.        , 0.00305264, 0.0061174 , 0.00919556, 0.01228799,
    0.01539545, 0.01851793, 0.02165522, 0.02480711, 0.02797305,
    0.0311526 , 0.03434537, 0.03755084, 0.04076859, 0.0439983 ,
    0.04723965, 0.05049237, 0.05375624, 0.05703107, 0.06031671,
    0.06361302, 0.06691991, 0.07023729, 0.07356508, 0.07690323,
    0.08025168, 0.08361038, 0.08697933, 0.09035848, 0.09374782,
    0.09714737, 0.10055711, 0.10397706, 0.10740721, 0.11084758,
    0.11429816, 0.11775894, 0.12122991, 0.12471108, 0.12820247,
    0.13170412, 0.13521611, 0.13873857, 0.1422717 , 0.14581576,
    0.14937107, 0.15293801, 0.156517  , 0.16010853, 0.1637131 ,
    0.16733124, 0.17096348, 0.17461034, 0.17827235, 0.18195001,
    0.18564378, 0.18935413, 0.19308149, 0.19682629, 0.20058895,
    0.20436986, 0.20816943, 0.21198805, 0.21582611, 0.21968398,
    0.22356206, 0.22746073, 0.23138036, 0.23532135, 0.23928408,
    0.24326894, 0.2472763 , 0.25130655, 0.25536006, 0.25943721,
    0.2635384 , 0.26766399, 0.27181438, 0.27598996, 0.28019112,
    0.28441826, 0.28867178, 0.29295209, 0.29725959, 0.30159472,
    0.30595789, 0.31034954, 0.31477012, 0.31922009, 0.3236999 ,
    0.32821003, 0.33275096, 0.3373232 , 0.34192725, 0.34656362,
    0.35123286, 0.35593551, 0.36067213, 0.3654433 , 0.37024961,
    0.37509166, 0.37997009, 0.38488553, 0.38983863, 0.39483008,
    0.39986057, 0.40493083, 0.41004157, 0.41519357, 0.4203876 ,
    0.42562446, 0.43090498, 0.43623001, 0.44160041, 0.4470171 ,
    0.452481  , 0.45799307, 0.46355429, 0.46916568, 0.47482827,
    0.48054317, 0.48631146, 0.49213432, 0.49801292, 0.50394848,
    0.50994227, 0.51599559, 0.5221098 , 0.5282863 , 0.53452652,
    0.54083196, 0.54720417, 0.55364474, 0.56015535, 0.56673771,
    0.57339363, 0.58012495, 0.5869336 , 0.59382159, 0.60079102,
    0.60784406, 0.61498299, 0.62221018, 0.62952811, 0.63693937,
    0.64444668, 0.65205288, 0.65976098, 0.66757413, 0.67549562,
    0.68352897, 0.69167787, 0.69994624, 0.70833825, 0.71685832,
    0.72551116, 0.73430183, 0.74323576, 0.75231876, 0.76155712,
    0.77095769, 0.7805279 , 0.79027589, 0.80021058, 0.8103417 ,
    0.82067991, 0.83123653, 0.84202313, 0.85305031, 0.86432628,
    0.87585399, 0.88762812, 0.89963264, 0.91183917, 0.92421066,
    0.93670646, 0.94928847, 0.9619269 , 0.97460007, 0.98729352,
    1.        ])

q_profile = np.array([0.107328883E+01, 0.107720493E+01, 0.108176034E+01, 0.108662293E+01, 0.109180789E+01,
    0.109715777E+01, 0.110237995E+01, 0.110759326E+01, 0.111264174E+01, 0.111749784E+01,
    0.112223282E+01, 0.112679797E+01, 0.113119024E+01, 0.113545534E+01, 0.113960896E+01,
    0.114366003E+01, 0.114762476E+01, 0.115151626E+01, 0.115534554E+01, 0.115912742E+01,
    0.116286988E+01, 0.116657936E+01, 0.117026008E+01, 0.117391590E+01, 0.117755199E+01,
    0.118117295E+01, 0.118478192E+01, 0.118838122E+01, 0.119197425E+01, 0.119556509E+01,
    0.119915627E+01, 0.120274966E+01, 0.120634518E+01, 0.120994179E+01, 0.121353789E+01,
    0.121713202E+01, 0.122072380E+01, 0.122431461E+01, 0.122790918E+01, 0.123151371E+01,
    0.123513878E+01, 0.123880044E+01, 0.124251869E+01, 0.124631861E+01, 0.125022176E+01,
    0.125424822E+01, 0.125841538E+01, 0.126274398E+01, 0.126724630E+01, 0.127193166E+01,
    0.127680429E+01, 0.128186393E+01, 0.128710787E+01, 0.129253127E+01, 0.129812616E+01,
    0.130388491E+01, 0.130980104E+01, 0.131586896E+01, 0.132208448E+01, 0.132844437E+01,
    0.133494602E+01, 0.134158692E+01, 0.134836506E+01, 0.135527848E+01, 0.136232650E+01,
    0.136950945E+01, 0.137682756E+01, 0.138428134E+01, 0.139187095E+01, 0.139959587E+01,
    0.140745565E+01, 0.141544973E+01, 0.142357719E+01, 0.143183796E+01, 0.144023278E+01,
    0.144876269E+01, 0.145742867E+01, 0.146623149E+01, 0.147517216E+01, 0.148425197E+01,
    0.149347239E+01, 0.150283494E+01, 0.151234166E+01, 0.152199499E+01, 0.153179756E+01,
    0.154175224E+01, 0.155186207E+01, 0.156213027E+01, 0.157256021E+01, 0.158315538E+01,
    0.159391939E+01, 0.160485603E+01, 0.161596937E+01, 0.162726368E+01, 0.163874355E+01,
    0.165041380E+01, 0.166227938E+01, 0.167434543E+01, 0.168661718E+01, 0.169909986E+01,
    0.171179916E+01, 0.172472097E+01, 0.173787132E+01, 0.175125670E+01, 0.176488396E+01,
    0.177876015E+01, 0.179289220E+01, 0.180728716E+01, 0.182195244E+01, 0.183689591E+01,
    0.185212573E+01, 0.186765021E+01, 0.188347837E+01, 0.189961968E+01, 0.191608329E+01,
    0.193287846E+01, 0.195001494E+01, 0.196750347E+01, 0.198535512E+01, 0.200358108E+01,
    0.202219342E+01, 0.204120481E+01, 0.206062711E+01, 0.208047288E+01, 0.210075619E+01,
    0.212149212E+01, 0.214269631E+01, 0.216438465E+01, 0.218657330E+01, 0.220927901E+01,
    0.223251944E+01, 0.225631341E+01, 0.228068235E+01, 0.230564851E+01, 0.233123430E+01,
    0.235746252E+01, 0.238435665E+01, 0.241194300E+01, 0.244025012E+01, 0.246931034E+01,
    0.249915631E+01, 0.252982035E+01, 0.256133725E+01, 0.259374468E+01, 0.262708650E+01,
    0.266140964E+01, 0.269676294E+01, 0.273319708E+01, 0.277076666E+01, 0.280953348E+01,
    0.284956843E+01, 0.289094597E+01, 0.293374411E+01, 0.297805206E+01, 0.302396718E+01,
    0.307160267E+01, 0.312108021E+01, 0.317253556E+01, 0.322611946E+01, 0.328201171E+01,
    0.334041338E+01, 0.340155473E+01, 0.346569273E+01, 0.353311337E+01, 0.360412353E+01,
    0.367903338E+01, 0.375799260E+01, 0.384097592E+01, 0.392733770E+01, 0.401591803E+01,
    0.410418524E+01, 0.418886581E+01, 0.426572874E+01, 0.433064863E+01, 0.438171292E+01,
    0.441836509E+01, 0.444296595E+01, 0.445858607E+01, 0.446785744E+01, 0.447329187E+01,
    0.447746807E+01])

axis_disk_polflux = -133.14471161454674
edge_disk_polflux = 0.0

def test_FluxConverter():

    converter = FluxConverter(q_profile, axis_polflux=axis_disk_polflux, 
                                         edge_polflux=edge_disk_polflux)
    disk_polflux_test_profile = np.linspace(axis_disk_polflux, edge_disk_polflux, len(q_profile))

    torflux_result_profile = converter.polflux2torflux(disk_polflux_test_profile)
    disk_polflux_result_profile = converter.torflux2polflux(torflux_result_profile)

    assert_allclose(disk_polflux_result_profile, disk_polflux_test_profile, atol=1e-15) # choice of atol due to used control data precision
    print("Conversion between polflux and torflux is selfconsistent")

    assert_allclose(torflux_result_profile, torflux_control_profile)
    print("Result of FluxConverter (polflux -> torflux) is consistent with control data")

    print('----------------------------------------------------------------')
    print('Result of conversion:')
    print("polflux = ", disk_polflux_test_profile[:5],'...',disk_polflux_test_profile[-5:])
    print("torflux = ", torflux_result_profile[:5],'...',torflux_result_profile[-5:])
    print('----------------------------------------------------------------')

def test_compare_FluxConverter_to_direct_conversion():

    """
    Comparison of FluxConverter conversion routine with a direct transformation:
    {torflux} = int_{axis_ribbon_polflux}^{ribbon_polflux}q({flux})d{flux}
    """
    disk_polflux_test_profile = np.linspace(axis_disk_polflux, edge_disk_polflux, len(q_profile))
    # q = d{torflux}/d{ribbon_polflux}, so need ribbon_polflux profile for direct conversion
    # d{ribbon_polflux} = -d{disk_polflux} -> so extra minus to q
    q = CubicSpline(disk_polflux_test_profile, -q_profile, extrapolate=True)
    get_torflux = q.antiderivative()
    torflux_DirectConversionProfile = get_torflux(disk_polflux_test_profile)

    # standard calculation of torflux profile with FluxConverter and disk_polflux profile
    converter = FluxConverter(q_profile, axis_polflux=axis_disk_polflux, 
                                         edge_polflux=edge_disk_polflux)
    torflux_result_profile = converter.polflux2torflux(disk_polflux_test_profile)

    assert_allclose(torflux_DirectConversionProfile, torflux_result_profile)
    print("Result of FluxConverter (polflux -> torflux) is consistent with direct conversion method")

def test_FluxConverter_label_conversion():

    converter = FluxConverter(q_profile)

    spol_test_profile = np.linspace(0.0, 1.0, len(q_profile))
    stor_result_profile = converter.spol2stor(spol_test_profile)
    spol_result_profile = converter.stor2spol(stor_result_profile)

    assert_allclose(spol_result_profile, spol_test_profile)
    print("Conversion between spol & stor is selfconsistent")

    assert_allclose(stor_result_profile, stor_control_profile, atol=1e-6) # choice of atol due to used control data precision
    print("Result of FLuxConverter (spol -> stor) is consistent with control data")

    print('----------------------------------------------------------------')
    print('Result of conversion:')
    print("s_pol = ", spol_test_profile[:5],'...',spol_test_profile[-5:])
    print("s_tor = ", stor_result_profile[:5],'...',stor_result_profile[-5:])
    print('----------------------------------------------------------------')

def test_FluxConverter_non_equidistant_spol():

    trial_spol = np.linspace(0,1,20)
    n_s = 10

    spol = np.linspace(0,1,n_s)**2
    q = spol**3
    converter = FluxConverter(q_profile=q, spol_profile=spol)

    spol_equidist = np.linspace(0,1,n_s)
    q_equidist = spol_equidist**3
    converter_equidist = FluxConverter(q_profile=q_equidist)

    stor = converter.spol2stor(trial_spol)
    stor_from_equidist_profiles = converter_equidist.spol2stor(trial_spol)

    assert_allclose(stor, stor_from_equidist_profiles)