set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})

set (MAIN_LIB ${MAIN_LIB} neo)
set (HDF5_TOOLS_LIB ${HDF5_TOOLS_LIB} hdf5_tools)
set (MAGFIE_LIB ${MAGFIE_LIB} magfie)

set(PROJLIBS /proj/plasma/Libs/ CACHE STRING "Common library path")
include_directories(${MPI_Fortran_INCLUDE_PATH})

include_directories(${PROJECT_SOURCE_DIR}/src/hdf5_tools)
include_directories(${PROJECT_SOURCE_DIR}/extra/MyMPILib)
include_directories(${MPI_Fortran_INCLUDE_PATH})

# Assumes previous include of hdf5_tools/CMakeLists.txt for find_package
include_directories(${HDF5_INCLUDE_DIRS})

set(LIBNEO_TESTING_ENABLED OFF)
if(DEFINED ENV{LIBNEO_TESTING})
  string(STRIP "$ENV{LIBNEO_TESTING}" _libneo_testing_raw)
  string(TOLOWER "${_libneo_testing_raw}" _libneo_testing_value)
  if(NOT _libneo_testing_value STREQUAL ""
      AND NOT _libneo_testing_value STREQUAL "0"
      AND NOT _libneo_testing_value STREQUAL "false"
      AND NOT _libneo_testing_value STREQUAL "no"
      AND NOT _libneo_testing_value STREQUAL "off")
    set(LIBNEO_TESTING_ENABLED ON)
  endif()
endif()

find_package(Python COMPONENTS Interpreter)
if (NOT Python_FOUND)
  message(FATAL_ERROR "Python interpreter required for GEQDSK scripts")
endif()

execute_process(COMMAND nf-config --flibs
                OUTPUT_VARIABLE NETCDF_LIBRARIES
                OUTPUT_STRIP_TRAILING_WHITESPACE)

set (COMMON_LIBS ${MAIN_LIB} ${BLAS_LIBRARIES} ${LAPACK_LIBRARIES} ${NETCDF_LIBRARIES})

add_executable(test_transport.x transport/test_transport.f90)
target_link_libraries(test_transport.x
  neo
  transport
  collision_freqs
  util_for_test
)

add_executable(test_collision_freqs.x collisions/test_collision_freqs.f90)
target_link_libraries(test_collision_freqs.x
  neo
  collision_freqs
  species
  util_for_test
)

add_executable(test_arnoldi.x source/test_arnoldi.f90)
target_link_libraries(test_arnoldi.x
  ${COMMON_LIBS}
  MyMPILib
  ${MPI_Fortran_LIBRARIES}
)

add_executable(test_binsrc.x source/test_binsrc.f90)
target_link_libraries(test_binsrc.x
  ${COMMON_LIBS}
)

add_executable(test_boozer_class.x source/test_boozer_class.f90)
target_link_libraries(test_boozer_class.x
  ${COMMON_LIBS}
)

add_executable(test_efit_class.x source/test_efit_class.f90)
target_link_libraries(test_efit_class.x
  ${COMMON_LIBS}
)

add_executable(test_geqdsk_tools.x source/test_geqdsk_tools.f90)
target_link_libraries(test_geqdsk_tools.x
  ${MAIN_LIB}
  ${MAGFIE_LIB}
)

if(LIBNEO_TESTING_ENABLED)
  set(TEST_OUTPUT_DIR ${CMAKE_BINARY_DIR}/test)
  file(MAKE_DIRECTORY ${TEST_OUTPUT_DIR})
  # Create subdirectories for different test types
  file(MAKE_DIRECTORY ${TEST_OUTPUT_DIR}/source)
  file(MAKE_DIRECTORY ${TEST_OUTPUT_DIR}/scripts)
  file(MAKE_DIRECTORY ${TEST_OUTPUT_DIR}/python)
  file(MAKE_DIRECTORY ${TEST_OUTPUT_DIR}/poincare)

  add_executable(test_geoflux.x source/test_geoflux.f90)
  target_link_libraries(test_geoflux.x
    ${COMMON_LIBS}
    ${MAGFIE_LIB}
  )

  add_executable(geoflux_coord_dump.x source/geoflux_coord_dump.f90)
  target_link_libraries(geoflux_coord_dump.x
    ${COMMON_LIBS}
    ${MAGFIE_LIB}
  )
endif()

add_executable(test_simpson.x source/test_simpson.f90)
target_link_libraries(test_simpson.x
  ${COMMON_LIBS}
)
add_executable(test_hdf5_tools.x source/test_hdf5_tools.f90)
target_link_libraries(test_hdf5_tools.x
  ${HDF5_TOOLS_LIB}
)

add_executable(test_mympilib.x
  source/test_mympilib.f90
  source/derived_scheduler_module.f90
)
target_link_libraries(test_mympilib.x
  MyMPILib
  ${MPI_Fortran_LIBRARIES}
)

add_executable(test_system_utility.x
  source/test_system_utility.f90
  ../src/local_rusage.c)
target_link_libraries(test_system_utility.x
  ${COMMON_LIBS}
)

add_executable(test_util.x source/test_util.f90)
target_link_libraries(test_util.x ${COMMON_LIBS})

add_executable(test_interpolate.x source/test_interpolate.f90)
target_link_libraries(test_interpolate.x ${COMMON_LIBS})

add_executable(test_batch_interpolate.x source/test_batch_interpolate.f90)
target_link_libraries(test_batch_interpolate.x ${COMMON_LIBS})

add_executable(test_vmec_modules.x source/test_vmec_modules.f90)
target_link_libraries(test_vmec_modules.x neo)

add_executable(test_coordinate_systems.x source/test_coordinate_systems.f90)
target_link_libraries(test_coordinate_systems.x neo ${MAGFIE_LIB})

# TODO: Update test for new psi_1..psi_7 interface
# add_executable(test_analytical_gs_circular.x source/test_analytical_gs_circular.f90)
# target_link_libraries(test_analytical_gs_circular.x ${MAGFIE_LIB} ${COMMON_LIBS})

add_executable(test_analytical_circular.x source/test_analytical_circular.f90)
target_link_libraries(test_analytical_circular.x ${MAGFIE_LIB} ${COMMON_LIBS})

add_executable(test_ripple_field.x source/test_ripple_field.f90)
target_link_libraries(test_ripple_field.x ${MAGFIE_LIB} ${COMMON_LIBS})

add_executable(test_analytical_geoflux.x source/test_analytical_geoflux.f90)
target_link_libraries(test_analytical_geoflux.x ${MAGFIE_LIB} ${COMMON_LIBS})


## Standard tests according to standard libneo Fortran test convention.

function (add_fortran_test name)
  add_test(NAME ${name} COMMAND ${name}.x)
  set_tests_properties(${name} PROPERTIES  FAIL_REGULAR_EXPRESSION "STOP")
endfunction()

add_fortran_test(test_binsrc)
add_fortran_test(test_boozer_class)
add_fortran_test(test_efit_class)
add_fortran_test(test_geqdsk_tools)
add_fortran_test(test_simpson)
add_fortran_test(test_hdf5_tools)
add_fortran_test(test_util)
add_fortran_test(test_interpolate)
add_fortran_test(test_batch_interpolate)
add_fortran_test(test_collision_freqs)
add_fortran_test(test_transport)
add_fortran_test(test_vmec_modules)
add_fortran_test(test_coordinate_systems)
# add_fortran_test(test_analytical_gs_circular)  # TODO: update for new interface
add_fortran_test(test_analytical_circular)
add_fortran_test(test_analytical_geoflux)

add_test(
  NAME test_ascot5_compare
  COMMAND ${Python_EXECUTABLE} ${CMAKE_SOURCE_DIR}/test/scripts/test_ascot5_compare.py
          --build-dir ${CMAKE_BINARY_DIR}
          --output-dir ${CMAKE_BINARY_DIR}/test/scripts
)
set_tests_properties(test_ascot5_compare PROPERTIES
  ENVIRONMENT "LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/test/scripts/ascot5/build:$ENV{LD_LIBRARY_PATH}"
)

add_test(
  NAME test_ripple_field_data
  COMMAND test_ripple_field.x
  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/test
)

add_test(
  NAME test_ripple_field_plot
  COMMAND ${Python_EXECUTABLE} ${CMAKE_SOURCE_DIR}/test/scripts/plot_ripple_comparison.py
          --data-dir ${CMAKE_BINARY_DIR}/test
          --output-dir ${CMAKE_BINARY_DIR}/test
)
set_tests_properties(test_ripple_field_plot PROPERTIES DEPENDS test_ripple_field_data)

if(LIBNEO_TESTING_ENABLED)
  add_test(
    NAME test_geoflux
    COMMAND ${Python_EXECUTABLE} ${CMAKE_SOURCE_DIR}/test/scripts/run_geoflux_test.py
            --exe $<TARGET_FILE:test_geoflux.x>
            --data-dir ${TEST_OUTPUT_DIR}/scripts
  )

  add_test(
    NAME test_geqdsk_plot
    COMMAND ${Python_EXECUTABLE} ${CMAKE_SOURCE_DIR}/test/scripts/geqdsk_plot.py
            --data-dir ${TEST_OUTPUT_DIR}/scripts
            --output-dir ${TEST_OUTPUT_DIR}/scripts
            --basename geqdsk
  )
  set_tests_properties(test_geqdsk_plot PROPERTIES DEPENDS test_geoflux)

  add_test(
    NAME test_geoflux_plot
    COMMAND ${Python_EXECUTABLE} ${CMAKE_SOURCE_DIR}/test/scripts/geoflux_plot.py
            --exe $<TARGET_FILE:geoflux_coord_dump.x>
            --data-dir ${TEST_OUTPUT_DIR}/scripts
            --output-dir ${TEST_OUTPUT_DIR}/scripts
            --basename geoflux
  )
  set_tests_properties(test_geoflux_plot PROPERTIES DEPENDS test_geoflux)
endif()

## Custom tests

# This requires an additional call to setup_test_arnoldi.py, so use the script
# instead of calling the executable directly.
# \note Maybe this could be solved with setup_test_arnoldi.py && test_arnoldi.x.
# Afterwards fail condition is set: test will fail if the output
# contains 'STOP'.
add_test(NAME test_arnoldi_setup
  COMMAND ${Python_EXECUTABLE} ${CMAKE_SOURCE_DIR}/test/source/setup_test_arnoldi.py)
set_tests_properties(test_arnoldi_setup PROPERTIES WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})

add_test(NAME test_arnoldi COMMAND test_arnoldi.x)
set_tests_properties(test_arnoldi PROPERTIES 
  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
  DEPENDS test_arnoldi_setup
  FAIL_REGULAR_EXPRESSION "STOP")

add_test(NAME test_mympilib
  COMMAND test_mympilib.x)
set_tests_properties(test_mympilib PROPERTIES  PASS_REGULAR_EXPRESSION "Derived initMaster")
add_test(NAME test_system_utility
         COMMAND test_system_utility.x)
set_tests_properties(test_system_utility PROPERTIES  FAIL_REGULAR_EXPRESSION "WARNING: resource usage could not be determined.")

add_subdirectory(util_for_test)
add_subdirectory(util_for_test_field)
add_subdirectory(field)
add_subdirectory(magfie)
add_subdirectory(polylag)
add_subdirectory(poincare)
add_subdirectory(odeint)
